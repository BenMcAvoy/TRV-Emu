name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - name: Linux Setup
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y wayland-protocols libwayland-dev
        sudo apt-get install -y libxkbcommon-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
        sudo apt-get install -y libgl1-mesa-dev

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # On Windows upload `$steps.strings.outputs.build-output-dir/Release/TRV-Emu.exe`
    # On Linux upload `$steps.strings.outputs.build-output-dir/TRV-Emu`

    - name: Windows Upload
      if: startsWith(matrix.os, 'windows')
      uses: actions/upload-artifact@v4
      with:
        name: TRV-Emu
        path: ${{ steps.strings.outputs.build-output-dir }}/Release/TRV-Emu.exe

    - name: Linux Upload
      if: startsWith(matrix.os, 'ubuntu')
      uses: actions/upload-artifact@v4
      with:
        name: TRV-Emu
        path: ${{ steps.strings.outputs.build-output-dir }}/TRV-Emu

    # - name: If we have a tag, create a release
    #   if: startsWith(github.ref, 'refs/tags/')
    #   uses: softprops/action-gh-release@v1
    #   with:
    #     files: ${{ steps.strings.outputs.build-output-dir }}/*
    #     tag_name: ${{ github.ref }}
    #     token: ${{ secrets.GITHUB_TOKEN }}
